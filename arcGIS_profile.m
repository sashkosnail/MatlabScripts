%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Documents\PhD\FieldStudies\Newmarket_test3.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/01 16:01:06

%% Initialize variables.
clear;
if((~exist('PathName', 'var'))|(PathName == 0)) %#ok<OR2>
            PathName = ''; end
    [FileName, PathName, ~] = uigetfile([PathName, '*.txt'], 'Pick File');
    if(isequal(FileName, 0))
        return; end
filename = [PathName, FileName];
delimiter = ',';
startRow = 2;

%% Line IDS and Names

%Uxbridge
% LINES={'Blue Mountain Road', 'Township Concession 2', ...
%     'Brock-Scugog Townline Road', 'Sideroad 18', 'Old Simcoe Rd.', ...
%     'Scugog 12', 'Saintfield Road', 'Manvers-Scugog Townline', ...
%     'Telecom Road', 'Boundary/Drum Road', 'Porter Road', ...
%     'Balyduff/McKee Road', 'Grey/Weston Road', 'Century Farm Road', ...
%     'Falls Road', 'Sandy Hook Road', 'Falls Line', 'Morton Line', ...
%     'Tapley Quarter Line', 'Marsh Hill Road'};
% LINES = {'Wilmont/Best Rd'};
LINES = {'1','2','3','4'};
%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%*s%*s%s%*s%*s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3]);
rawCellColumns = raw(:, 4);


%% Create output variable
data = table;
data.FIRST_DIST = cell2mat(rawNumericColumns(:, 1));
data.FIRST_Z = cell2mat(rawNumericColumns(:, 2));
data.LINE_ID = cell2mat(rawNumericColumns(:, 3));
data.SRC_NAME = rawCellColumns(:, 1);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

%% process

line_ids = unique(data.LINE_ID);
rock=cell(1);
drift=rock;
for id = 1:1:length(line_ids)
    rows = data.LINE_ID==line_ids(id);
    rows = rows(1:length(rows)/2);
    rr = [rows ;zeros(length(rows),1)] == 1;
    dr = [zeros(length(rows),1); rows] == 1;
    rock{id} = table2array(data(rr, {'FIRST_DIST','FIRST_Z'}));
    drift{id} = table2array(data(dr, {'FIRST_DIST','FIRST_Z'}));
end    

[length_order, length_order_ID] = sort(cellfun('length', drift));

%% Plot
line_n = length(line_ids);
NUM_PLOTS = 5;
fig_id = 1;
n_figs = ceil(line_n/NUM_PLOTS/2);
fig_width = 1500/n_figs;
fig_height = 540;
for id = 1:1:line_n
    if(mod(id,NUM_PLOTS)==1)        
        f = figure(fig_id);clf
        f.Position = [mod(...
    (fig_id-1)*fig_width, 1500), 5+fig_height*floor((fig_id-1)/n_figs)...
    fig_width fig_height];
        fig_id = fig_id+1;
        NUM_PLOTS = min(NUM_PLOTS, line_n-id+1);
        tmp=vertcat(rock{length_order_ID(id:id+NUM_PLOTS-1)});
        max_X=max(tmp(:,1))*110.5716;
    end
    subaxis(NUM_PLOTS,1,mod(id-1,NUM_PLOTS)+1,'MT',0,'MB',0.04,'MR',0.005,'ML',0.025,'SV',0.0)
    r = rock{length_order_ID(id)}(:,2);
    d = drift{length_order_ID(id)}(:,2);
    x = rock{length_order_ID(id)}(:,1)*110.5716;
    area(x, [r, d])
    grid on; grid minor
    axis([0 max_X 0 400]);
    t=title(LINES(length_order_ID(id)));
    t.Units='normalized';
    t.Position=[0.5 0.05];
    if(mod(id,NUM_PLOTS)==3)
        ylabel('Elevation[masl]')
    elseif (mod(id,NUM_PLOTS)==0)
        xlabel('Distance along line[km]')
    end
    
end
legend('Bedrock','Surface') 